#include "gerenciador_servo.h"

ServoControl::ServoControl()
{
    pinoServo = -1;
    ativo = false;
}

void ServoControl::iniciar(int pino)
{
    pinoServo = pino;

    // Configura√ß√£o simples sem aloca√ß√£o manual de timers
    servo.setPeriodHertz(50);           // 50Hz padr√£o para servos
    servo.attach(pinoServo);            // Deixa a biblioteca gerenciar os timers automaticamente

    // Inicializa na posi√ß√£o central (90¬∞) para servo 180¬∞
    servo.writeMicroseconds(1500);      // 90¬∞ = centro para servo 180¬∞
    delay(500); // Aguarda estabilizar
    
    Serial.printf("üîß Servo PDI 6221MG (180¬∞) iniciado no pino %d (90¬∞ centro)\n", pino);
}

void ServoControl::ativar()
{
    ativo = true;
    Serial.println("‚öôÔ∏è Servo ativado.");
}

void ServoControl::desativar()
{
    ativo = false;
    Serial.println("üõë Servo desativado.");
}

void ServoControl::girarHorarioComFlag(int velocidade)
{
    if (!ativo)
    {
        Serial.println("‚ö†Ô∏è Servo inativo. Use ativar() para permitir o movimento.");
        return;
    }

    velocidade = constrain(velocidade, 0, 100);
    int pwm = pwmParaVelocidade(velocidade, true);
    servo.writeMicroseconds(pwm);
    Serial.printf("‚û°Ô∏è Girando hor√°rio (%d%%) - PWM %dŒºs\n", velocidade, pwm);
}

void ServoControl::girarHorario(int velocidade)
{
    if (!ativo)
        return;

    velocidade = constrain(velocidade, 0, 100);
    int pwm = pwmParaVelocidade(velocidade, true);
    servo.writeMicroseconds(pwm);
}

void ServoControl::moverPara90AntiHorario()
{
    Serial.println("‚Ü©Ô∏è Indo para posi√ß√£o neutra (1520Œºs, anti-hor√°rio).");
    servo.writeMicroseconds(1000); // anti-hor√°rio m√°ximo
    delay(300);     // pequeno giro
    parar();
    Serial.println("‚úÖ Parado em neutro (1520Œºs).");
}

void ServoControl::parar()
{
    servo.writeMicroseconds(1500); // posi√ß√£o central (90¬∞) para servo 180¬∞
    delay(100); // Garante que o comando foi enviado
    Serial.println("‚èπÔ∏è Servo na posi√ß√£o central (90¬∞).");
}

void ServoControl::pararImediato()
{
    servo.writeMicroseconds(1500); // posi√ß√£o central (90¬∞) sem delay
}

// Novo m√©todo para controle posicional por √¢ngulos
void ServoControl::moverParaAngulo(int angulo)
{
    if (!ativo)
    {
        Serial.println("‚ö†Ô∏è Servo inativo. Use ativar() para permitir o movimento.");
        return;
    }
    
    // Limitar √¢ngulo entre 0¬∞ e 180¬∞
    angulo = constrain(angulo, 0, 180);
    
    // Mapear √¢ngulo (0-180¬∞) para microsegundos (500-2500Œºs)
    int micros = map(angulo, 0, 180, 500, 2500);
    
    servo.writeMicroseconds(micros);
    Serial.printf("üîÑ Servo movido para %d¬∞ (%dŒºs)\n", angulo, micros);
}

// M√©todo espec√≠fico para posi√ß√µes do alimentador
void ServoControl::alimentar(int porcao)
{
    if (!ativo)
    {
        Serial.println("‚ö†Ô∏è Servo inativo. Use ativar() para permitir alimenta√ß√£o.");
        return;
    }
    
    int angulo;
    String descricao;
    
    switch(porcao)
    {
        case 1: // Por√ß√£o pequena
            angulo = 45;
            descricao = "POR√á√ÉO PEQUENA";
            break;
        case 2: // Por√ß√£o m√©dia  
            angulo = 90;
            descricao = "POR√á√ÉO M√âDIA";
            break;
        case 3: // Por√ß√£o grande
            angulo = 135;
            descricao = "POR√á√ÉO GRANDE";
            break;
        default:
            angulo = 90;
            descricao = "POR√á√ÉO PADR√ÉO";
            break;
    }
    
    Serial.printf("üçΩÔ∏è %s (%d¬∞)\n", descricao.c_str(), angulo);
    moverParaAngulo(angulo);
    delay(1000); // Tempo para alimentar
    
    // Voltar ao centro
    moverParaAngulo(90);
    Serial.println("‚úÖ Alimenta√ß√£o conclu√≠da - Servo no centro");
}

void ServoControl::testar()
{
    Serial.println("üß™ Teste: movimento controlado...");

    ativar();
    
    // Teste hor√°rio suave
    Serial.println("   ‚û°Ô∏è Testando rota√ß√£o hor√°ria...");
    servo.writeMicroseconds(1600); // Rota√ß√£o suave hor√°ria
    delay(800);
    
    // Para
    servo.writeMicroseconds(1520); // Para
    delay(500);
    
    // Teste anti-hor√°rio suave  
    Serial.println("   ‚¨ÖÔ∏è Testando rota√ß√£o anti-hor√°ria...");
    servo.writeMicroseconds(1400); // Rota√ß√£o suave anti-hor√°ria
    delay(800);
    
    // Para definitivamente
    servo.writeMicroseconds(1520);
    delay(200);

    Serial.println("‚úÖ Teste conclu√≠do - Servo estabilizado.");
}

bool ServoControl::estaAtivo()
{
    return ativo;
}

int ServoControl::pwmParaVelocidade(int percentual, bool horario)
{
    // Para servo 1520Œºs: range 1000-2000Œºs
    // Neutro em 1520Œºs, hor√°rio 1520-2000Œºs, anti-hor√°rio 1000-1520Œºs
    if (horario)
    {
        return map(percentual, 0, 100, 1520, 2000); // 1520Œºs ‚Üí 2000Œºs
    }
    else
    {
        return map(percentual, 0, 100, 1520, 1000); // 1520Œºs ‚Üí 1000Œºs
    }
}